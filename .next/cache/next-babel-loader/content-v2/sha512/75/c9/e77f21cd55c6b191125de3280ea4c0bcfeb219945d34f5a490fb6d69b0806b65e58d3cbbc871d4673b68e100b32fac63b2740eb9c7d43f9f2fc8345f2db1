{"ast":null,"code":"//const axios = require(\"axios\");\n//const firebase = require(\"../firebase\");\nimport axios from \"axios\";\nimport firebase from \"../firebase\";\nexport const axiosPublic = axios.create({\n  baseURL: process.env.api\n});\nexport const axiosAuth = axios.create({\n  baseURL: process.env.api\n});\naxiosAuth.interceptors.request.use(async config => {\n  let user = await firebase.auth().currentUser;\n  config.headers.token = user ? await user.getIdToken(true) : \"\";\n  return config;\n}, error => {\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["/home/rodflow/Develop/React/nextjs/loginmd/actions/axios.js"],"names":["axios","firebase","axiosPublic","create","baseURL","process","env","api","axiosAuth","interceptors","request","use","config","user","auth","currentUser","headers","token","getIdToken","error","Promise","reject"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AACtCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADiB,CAAb,CAApB;AAIP,OAAO,MAAMC,SAAS,GAAGR,KAAK,CAACG,MAAN,CAAa;AACpCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADe,CAAb,CAAlB;AAIPC,SAAS,CAACC,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CACE,MAAOC,MAAP,IAAkB;AAChB,MAAIC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAT,GAAgBC,WAAjC;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAeC,KAAf,GAAuBJ,IAAI,GAAG,MAAMA,IAAI,CAACK,UAAL,CAAgB,IAAhB,CAAT,GAAiC,EAA5D;AACA,SAAON,MAAP;AACD,CALH,EAMGO,KAAD,IAAW;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CARH","sourcesContent":["//const axios = require(\"axios\");\n//const firebase = require(\"../firebase\");\nimport axios from \"axios\";\nimport firebase from \"../firebase\";\n\nexport const axiosPublic = axios.create({\n  baseURL: process.env.api,\n});\n\nexport const axiosAuth = axios.create({\n  baseURL: process.env.api,\n});\n\naxiosAuth.interceptors.request.use(\n  async (config) => {\n    let user = await firebase.auth().currentUser;\n    config.headers.token = user ? await user.getIdToken(true) : \"\";\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n"]},"metadata":{},"sourceType":"module"}